
 http://127.0.0.1:8002/signup/


post
{
    "first_name": "ss",
    "last_name": "De",
    "email": "ss.d@exme.com",
    "password": "securepassword123",
    "phone": "+1234567890",
    "address": "123 Main Street, City, State, 12345"
}

Responce
{
    "message": "User registered successfully",
    "user_id": 7,
    "customer_id": 5,
    "username": "ss De",
    "email": "ss.d@exme.com"
}



http://127.0.0.1:8002/login/


you can pass username or emailid


post

{
    "username": "ss De",
    "password": "securepassword123"
}

Responce

{
    "message": "Login successful",
    "user_id": 7,
    "username": "ss De",
    "email": "ss.d@exme.com",
    "first_name": "ss",
    "last_name": "De",
    "customer_id": 5,
    "customer_name": "ss De",
    "phone": "+1234567890",
    "address": "123 Main Street, City, State, 12345"
}




http://127.0.0.1:8002/logout/


post
{
    "username": "ss De"
}

Responce
{
    "message": "Logout successful"
}



http://127.0.0.1:8002/forgot-password/



post

{
    "email": "devops2.depl@gmail.com"
}


Responce

{
    "message": "Password reset email sent successfully"
}



http://127.0.0.1:8002/reset-password/

post

{
    "token": "hlloQkX1EyPd9Hneu76dOaBK8L6dN7qGOROk90CSaJr7enMtBl",
    "new_password": "your_new_password_here"
}

Responce

{
    "message": "Password reset successfully"
}



http://127.0.0.1:8002/change-password/


post

{
    "user_id": 9,
    "current_password": "securepassword123",
    "new_password": "securepassword1234"
}

Responce

{
    "message": "Password changed successfully"
}



http://127.0.0.1:8002/categories/


GET self request

Responce --

{
    "categories": [
        {
            "id": 1,
            "name": "Special Burgers",
            "description": "Gourmet burgers with unique flavors and premium ingredients"
        },
        {
            "id": 2,
            "name": "Momos",
            "description": "Delicious steamed or fried dumplings with various fillings"
        },
        {
            "id": 3,
            "name": "Fried Chicken",
            "description": "Crispy, golden fried chicken with special seasonings"
        },
        {
            "id": 4,
            "name": "Wings",
            "description": "Spicy and flavorful chicken wings with various sauces"
        },
        {
            "id": 5,
            "name": "Pizza",
            "description": "Freshly baked pizzas with a variety of toppings"
        },
        {
            "id": 6,
            "name": "Snacks",
            "description": "Quick and tasty snack options"
        },
        {
            "id": 7,
            "name": "Rolls",
            "description": "Delicious wraps and rolls with various fillings"
        },
        {
            "id": 8,
            "name": "Cakes",
            "description": "Beautiful and delicious cakes for every occasion"
        },
        {
            "id": 9,
            "name": "Occasion Cakes",
            "description": "Special cakes for birthdays, anniversaries, and celebrations"
        },
        {
            "id": 10,
            "name": "Pastry",
            "description": "Flaky and buttery pastries with sweet fillings"
        },
        {
            "id": 11,
            "name": "Jar Cake",
            "description": "Individual serving cakes in convenient jars"
        },
        {
            "id": 12,
            "name": "Cupcakes",
            "description": "Mini cakes with creative frostings and decorations"
        },
        {
            "id": 13,
            "name": "Desserts",
            "description": "Sweet treats and indulgent desserts"
        },
        {
            "id": 14,
            "name": "Sundaes",
            "description": "Ice cream sundaes with various toppings and sauces"
        },
        {
            "id": 15,
            "name": "Shakes",
            "description": "Creamy and refreshing milkshakes"
        },
        {
            "id": 16,
            "name": "Starter",
            "description": "Appetizers and beginning course dishes"
        }
    ]
}







http://127.0.0.1:8002/create-categories/

to create the new categories

post

{
    "name": "Main Course",
    "description": "Main dishes and entrees"
}


Responce

{
    "success": true,
    "message": "Category created successfully",
    "category": {
        "id": 1,
        "name": "Desserts",
        "description": "Sweet treats and desserts",
        "created_at": "2024-01-15T10:30:00.123456"
    }
}






http://127.0.0.1:8002/delete-categories/

post

{
    "category_id": 1
}

Responce

{
    "success": true,
    "message": "Category \"Desserts\" deleted successfully"
}




http://127.0.0.1:8002/complete-menu/


GET self request


{
    "success": true,
    "categories": [
        {
            "id": 8,
            "name": "Cakes",
            "description": "Beautiful and delicious cakes for every occasion",
            "items": [],
            "items_count": 0
        },
        {
            "id": 12,
            "name": "Cupcakes",
            "description": "Mini cakes with creative frostings and decorations",
            "items": [],
            "items_count": 0
        },
        {
            "id": 13,
            "name": "Desserts",
            "description": "Sweet treats and indulgent desserts",
            "items": [],
            "items_count": 0
        },
        {
            "id": 3,
            "name": "Fried Chicken",
            "description": "Crispy, golden fried chicken with special seasonings",
            "items": [],
            "items_count": 0
        },
        {
            "id": 11,
            "name": "Jar Cake",
            "description": "Individual serving cakes in convenient jars",
            "items": [],
            "items_count": 0
        },
        {
            "id": 2,
            "name": "Momos",
            "description": "Delicious steamed or fried dumplings with various fillings",
            "items": [],
            "items_count": 0
        },
        {
            "id": 9,
            "name": "Occasion Cakes",
            "description": "Special cakes for birthdays, anniversaries, and celebrations",
            "items": [],
            "items_count": 0
        },
        {
            "id": 10,
            "name": "Pastry",
            "description": "Flaky and buttery pastries with sweet fillings",
            "items": [],
            "items_count": 0
        },
        {
            "id": 5,
            "name": "Pizza",
            "description": "Freshly baked pizzas with a variety of toppings",
            "items": [],
            "items_count": 0
        },
        {
            "id": 7,
            "name": "Rolls",
            "description": "Delicious wraps and rolls with various fillings",
            "items": [],
            "items_count": 0
        },
        {
            "id": 15,
            "name": "Shakes",
            "description": "Creamy and refreshing milkshakes",
            "items": [],
            "items_count": 0
        },
        {
            "id": 6,
            "name": "Snacks",
            "description": "Quick and tasty snack options",
            "items": [],
            "items_count": 0
        },
        {
            "id": 1,
            "name": "Special Burgers",
            "description": "Gourmet burgers with unique flavors and premium ingredients",
            "items": [],
            "items_count": 0
        },
        {
            "id": 16,
            "name": "Starter",
            "description": "Appetizers and beginning course dishes",
            "items": [],
            "items_count": 0
        },
        {
            "id": 14,
            "name": "Sundaes",
            "description": "Ice cream sundaes with various toppings and sauces",
            "items": [],
            "items_count": 0
        },
        {
            "id": 4,
            "name": "Wings",
            "description": "Spicy and flavorful chicken wings with various sauces",
            "items": [],
            "items_count": 0
        }
    ],
    "total_categories": 16,
    "total_items": 0
}





http://127.0.0.1:8002/complete-menu/

GET self request







http://127.0.0.1:8002/category-menu/?category=10


GET to get the items of a one categories





http://127.0.0.1:8002/menu-item/?item_id=10



Responce
{
    "success": true,
    "menu_item": {
        "id": 10,
        "name": "Chocolate Cake",
        "description": "Rich chocolate cake with ganache",
        "category_id": 8,
        "category": "Cakes",
        "is_vegetarian": true,
        "image": "cake1.jpg",
        "is_available": true,
        "pricing_type": "single",
        "pricing": {
            "type": "single",
            "price": 6.99,
            "display_price": "â‚¹6.99"
        },
        "availability_schedule": {
            "message": "Available from 8 AM to 8 PM",
            "available_to": "20:00:00",
            "available_days": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "available_from": "08:00:00"
        },
        "created_at": "2025-09-24T15:15:49+00:00"
    }
}



http://127.0.0.1:8002/menu/search/?q=cho



GET 

query based search




http://127.0.0.1:8002/order/create/

post

{
  "customer_id": 8,
  "delivery_address": "123 Main Street, City, State 12345",
  "phone": "+1-555-0123",
  "items": [
    {
      "menu_item_id": 1,
      "quantity": 2,
      "selected_variation": "Large",
      "special_instructions": "No onions, extra cheese"
    },
    {
      "menu_item_id": 2,
      "quantity": 1,
      "selected_variation": "Medium"
    }
  ]
}

Responce

{
    "success": true,
    "message": "Order created successfully",
    "order_id": 1,
    "order_number": "ORD000001",
    "total_amount": 36.97,
    "order_summary": {
        "order_id": 1,
        "order_number": "ORD000001",
        "customer_name": "sai De",
        "customer_phone": "+1-555-0123",
        "delivery_address": "123 Main Street, City, State 12345",
        "total_amount": 36.97,
        "status": "pending",
        "order_date": "2025-09-25T05:17:44.891477+00:00",
        "items": [
            {
                "id": 1,
                "name": "Classic Cheeseburger",
                "quantity": 2,
                "unit_price": 12.99,
                "total_price": 25.98,
                "selected_variation": "Large",
                "special_instructions": "No onions, extra cheese"
            },
            {
                "id": 2,
                "name": "Veggie Supreme",
                "quantity": 1,
                "unit_price": 10.99,
                "total_price": 10.99,
                "selected_variation": "Medium",
                "special_instructions": ""
            }
        ]
    }
}




http://127.0.0.1:8002/customer_orders/?customer_id=8





DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'store',               # MySQL database name
        'USER': 'test',         # MySQL username
        'PASSWORD': 'StrongPassword', # MySQL password
        'HOST': '192.168.29.239',          # or your MySQL server IP
        'PORT': '3306'               
    }
}







{
    "message": "User registered successfully",
    "user_id": 10,
    "customer_id": 8,
    "username": "sai De",
    "email": "sai.d@exme.com"
}



SEASIDE LIVE BAKE STUDIO - USER SIDE APIs DOCUMENTATION
================================================================

Date: October 22, 2025
Website: https://api.seasidelbs.com
Frontend: http://localhost:5174

================================================================
AUTHENTICATION APIs
================================================================

1. USER REGISTRATION
-------------------
Method: POST
Endpoint: /signup/
Description: Register a new customer account

Request Body:
{
  "email": "customer@example.com",
  "password": "securepassword123",
  "first_name": "John",
  "last_name": "Doe",
  "phone": "+1234567890"
}

Success Response:
{
  "message": "User registered successfully",
  "user_id": 38,
  "customer_id": 31,
  "username": "John Doe",
  "email": "customer@example.com"
}

Error Response:
{
  "error": "first_name is required"
}

-------------------

2. USER LOGIN
-------------
Method: POST
Endpoint: /login/
Description: Authenticate customer with email and password

Request Body:
{
  "username": "customer@example.com",
  "password": "securepassword123"
}

Success Response:
{
  "message": "Login successful",
  "user_id": 38,
  "username": "John Doe",
  "email": "customer@example.com",
  "first_name": "John",
  "last_name": "Doe",
  "customer_id": 31,
  "customer_name": "John Doe",
  "phone": "+1234567890",
  "address": ""
}

Error Response:
{
  "error": "Invalid email or password"
}

-------------------

3. USER LOGOUT
--------------
Method: POST
Endpoint: /logout/
Description: Logout current user session

Request Body: None

Success Response:
{
  "message": "Logged out successfully"
}

-------------------

4. FORGOT PASSWORD
------------------
Method: POST
Endpoint: /forgot-password/
Description: Send password reset email to user

Request Body:
{
  "email": "customer@example.com"
}

Success Response:
{
  "message": "Password reset email sent"
}

-------------------

5. RESET PASSWORD
-----------------
Method: POST
Endpoint: /reset-password/
Description: Reset password with token

Request Body:
{
  "token": "reset_token_here",
  "new_password": "newpassword123"
}

Success Response:
{
  "message": "Password reset successfully"
}

-------------------

6. CHANGE PASSWORD
------------------
Method: POST
Endpoint: /change-password/
Description: Change password for logged-in user

Request Body:
{
  "current_password": "oldpassword123",
  "new_password": "newpassword123"
}

Success Response:
{
  "message": "Password changed successfully"
}

================================================================
MENU & CATEGORY APIs
================================================================

7. GET ALL CATEGORIES
---------------------
Method: GET
Endpoint: /categories/
Description: Retrieve all food categories

Request Body: None

Success Response:
{
  "categories": [
    {
      "id": 3,
      "name": "Fried Chicken",
      "description": "Crispy, golden fried chicken with special seasonings"
    },
    {
      "id": 4,
      "name": "Wings",
      "description": "Spicy and flavorful chicken wings with various sauces"
    },
    {
      "id": 5,
      "name": "Pizza",
      "description": "Freshly baked pizzas with a variety of toppings"
    }
  ]
}

-------------------

8. GET ALL MENU ITEMS
---------------------
Method: GET
Endpoint: /GetAllMenu/
Description: Retrieve all available menu items

Query Parameters:
- available_only: true/false (filter by availability)
- category_id: number (filter by category)
- vegetarian_only: true/false (filter vegetarian items)

Request Examples:
GET /GetAllMenu/
GET /GetAllMenu/?available_only=true
GET /GetAllMenu/?category_id=5
GET /GetAllMenu/?available_only=true&vegetarian_only=true

Success Response:
{
  "success": true,
  "total_items": 14,
  "menu_items": [
    {
      "id": 6,
      "name": "BBQ Chicken Wings",
      "description": "Smoky barbecue flavored chicken wings",
      "price": 11.99,
      "pricing_type": "single",
      "price_variations": {},
      "is_available": true,
      "is_vegetarian": false,
      "category_id": 4,
      "category_name": "Wings",
      "image": "https://via.placeholder.com/300x200?text=No+Image",
      "created_at": "2025-09-24T15:15:49+00:00"
    }
  ]
}

-------------------

9. GET MENU BY CATEGORY
-----------------------
Method: GET
Endpoint: /category-menu/
Description: Get menu items filtered by category

Query Parameters:
- category_id: number (required)

Request Example:
GET /category-menu/?category_id=5

Success Response:
{
  "success": true,
  "category": {
    "id": 5,
    "name": "Pizza"
  },
  "menu_items": [
    {
      "id": 7,
      "name": "Margherita Pizza",
      "description": "Classic tomato and mozzarella pizza",
      "price": 12.99,
      "is_available": true,
      "is_vegetarian": true
    }
  ]
}

-------------------

10. GET SINGLE MENU ITEM
------------------------
Method: GET
Endpoint: /menu-item/
Description: Get details of a specific menu item

Query Parameters:
- item_id: number (required)

Request Example:
GET /menu-item/?item_id=6

Success Response:
{
  "success": true,
  "menu_item": {
    "id": 6,
    "name": "BBQ Chicken Wings",
    "description": "Smoky barbecue flavored chicken wings",
    "price": 11.99,
    "pricing_type": "single",
    "price_variations": {},
    "is_available": true,
    "is_vegetarian": false,
    "category_id": 4,
    "category_name": "Wings",
    "image": "https://via.placeholder.com/300x200?text=No+Image"
  }
}

-------------------

11. SEARCH MENU ITEMS
---------------------
Method: GET
Endpoint: /menu/search/
Description: Search menu items by name or description

Query Parameters:
- q: string (search query)
- available: true/false (filter by availability)

Request Example:
GET /menu/search/?q=chicken&available=true

Success Response:
{
  "success": true,
  "query": "chicken",
  "results": [
    {
      "id": 6,
      "name": "BBQ Chicken Wings",
      "description": "Smoky barbecue flavored chicken wings",
      "price": 11.99,
      "is_available": true
    }
  ]
}

================================================================
ORDER MANAGEMENT APIs
================================================================

12. CREATE ORDER
----------------
Method: POST
Endpoint: /order/create/
Description: Create a new order

Request Body:
{
  "customer_id": 31,
  "items": [
    {
      "menu_item_id": 6,
      "quantity": 2,
      "price": 11.99,
      "selected_variation": "Large",
      "special_instructions": "Extra spicy"
    }
  ],
  "total_amount": 23.98,
  "delivery_address": "123 Main Street, City, State",
  "phone": "+1234567890",
  "payment_method": "cash"
}

Success Response:
{
  "success": true,
  "message": "Order created successfully",
  "order_id": 27,
  "order_number": "ORD000027",
  "total_amount": 23.98,
  "order_summary": {
    "order_id": 27,
    "order_number": "ORD000027",
    "customer_name": "John Doe",
    "customer_phone": "+1234567890",
    "delivery_address": "123 Main Street, City, State",
    "total_amount": 23.98,
    "status": "pending",
    "order_date": "2025-10-22T05:12:49.071626+00:00",
    "items": [
      {
        "id": 6,
        "name": "BBQ Chicken Wings",
        "quantity": 2,
        "unit_price": 11.99,
        "total_price": 23.98,
        "selected_variation": "Large",
        "special_instructions": "Extra spicy"
      }
    ]
  }
}

Error Response:
{
  "success": false,
  "error": "Customer not found"
}

-------------------

13. GET CUSTOMER ORDERS
-----------------------
Method: GET
Endpoint: /customer_orders/
Description: Get all orders for a specific customer

Query Parameters:
- customer_id: number (required)

Request Example:
GET /customer_orders/?customer_id=31

Success Response:
{
  "success": true,
  "customer_id": 31,
  "orders": [
    {
      "order_id": 27,
      "order_number": "ORD000027",
      "total_amount": 23.98,
      "status": "confirmed",
      "order_date": "2025-10-22T05:12:49+00:00",
      "delivery_address": "123 Main Street, City, State",
      "items_count": 1,
      "items": [
        {
          "id": 6,
          "name": "BBQ Chicken Wings",
          "quantity": 2,
          "price": 11.99,
          "selected_variation": "Large",
          "special_instructions": "Extra spicy"
        }
      ]
    }
  ]
}

-------------------

14. GET ORDER DETAILS
---------------------
Method: GET
Endpoint: /order/{order_id}/
Description: Get detailed information about a specific order

Request Example:
GET /order/27/

Success Response:
{
  "success": true,
  "order": {
    "order_id": 27,
    "order_number": "ORD000027",
    "customer_name": "John Doe",
    "customer_phone": "+1234567890",
    "delivery_address": "123 Main Street, City, State",
    "total_amount": 23.98,
    "status": "confirmed",
    "order_date": "2025-10-22T05:12:49+00:00",
    "payment_method": "cash",
    "items": [
      {
        "id": 6,
        "name": "BBQ Chicken Wings",
        "description": "Smoky barbecue flavored chicken wings",
        "quantity": 2,
        "unit_price": 11.99,
        "total_price": 23.98,
        "selected_variation": "Large",
        "special_instructions": "Extra spicy"
      }
    ]
  }
}

================================================================
INQUIRY/CONTACT APIs
================================================================

15. CREATE INQUIRY
------------------
Method: POST
Endpoint: /inquirycreate/
Description: Submit a customer inquiry or contact form

Request Body:
{
  "name": "John Doe",
  "email": "john@example.com",
  "phone": "+1234567890",
  "message": "Do you have vegetarian options available?"
}

Success Response:
{
  "success": true,
  "message": "Thank you for your message! We will get back to you soon.",
  "inquiry_id": 12
}

Error Response:
{
  "success": false,
  "error": "Name is required"
}

================================================================
CUSTOMER PROFILE APIs
================================================================

16. GET CUSTOMER PROFILE
------------------------
Method: GET
Endpoint: /profile/
Description: Get current customer profile information

Headers:
- Authorization: Bearer {token}

Success Response:
{
  "success": true,
  "customer": {
    "id": 31,
    "name": "John Doe",
    "email": "john@example.com",
    "phone": "+1234567890",
    "address": "123 Main Street, City, State",
    "created_at": "2025-10-22T05:10:00+00:00"
  }
}

-------------------

17. UPDATE CUSTOMER PROFILE
---------------------------
Method: PUT
Endpoint: /profile/
Description: Update customer profile information

Headers:
- Authorization: Bearer {token}

Request Body:
{
  "name": "John Smith",
  "phone": "+1987654321",
  "address": "456 Oak Avenue, City, State"
}

Success Response:
{
  "success": true,
  "message": "Profile updated successfully",
  "customer": {
    "id": 31,
    "name": "John Smith",
    "email": "john@example.com",
    "phone": "+1987654321",
    "address": "456 Oak Avenue, City, State"
  }
}

================================================================
ORDER STATUS VALUES
================================================================

Valid Order Statuses:
- pending: Order received, awaiting confirmation
- confirmed: Order confirmed by restaurant
- preparing: Order being prepared
- out_for_delivery: Order out for delivery
- delivered: Order delivered successfully
- cancelled: Order cancelled

================================================================
ERROR CODES & MESSAGES
================================================================

Common Error Responses:

Authentication Errors:
- "Invalid email or password"
- "User not found"
- "Token expired"
- "first_name is required"
- "email is required"
- "password is required"

Validation Errors:
- "Name is required"
- "Email is required"
- "Phone number is required"
- "Message is required"
- "Please enter a valid email address"
- "Please enter a valid phone number"

Business Logic Errors:
- "Customer not found"
- "Menu item not found"
- "Order not found"
- "Insufficient quantity available"
- "Invalid order status"

Server Errors:
- "Internal server error"
- "Service temporarily unavailable"

================================================================
API RESPONSE FORMATS
================================================================

Success Response Format:
{
  "success": true,
  "message": "Operation completed successfully",
  "data": { ... }
}

Error Response Format:
{
  "success": false,
  "error": "Error message here"
}

List Response Format:
{
  "success": true,
  "total_count": 10,
  "data": [ ... ]
}

================================================================
AUTHENTICATION HEADERS
================================================================

For protected endpoints, include:
Authorization: Bearer {jwt_token}

Example:
curl -H "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..." \
     https://api.seasidelbs.com/profile/

================================================================
RATE LIMITING
================================================================

API Rate Limits:
- Authentication endpoints: 5 requests per minute
- General endpoints: 100 requests per minute
- File upload: 10 requests per minute

Rate Limit Headers:
X-RateLimit-Limit: 100
X-RateLimit-Remaining: 95
X-RateLimit-Reset: 1640995200

================================================================
CORS POLICY
================================================================

CORS Headers:
Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS
Access-Control-Allow-Headers: Content-Type, Authorization

================================================================
TESTING ENDPOINTS
================================================================

Test User Credentials:
Email: testuser@example.com
Password: testpass123

Test Admin Credentials:
Email: admin@seasidelbs.com
Password: admin123

================================================================
FILE UPLOAD LIMITS
================================================================

File Upload Restrictions:
- Maximum file size: 5MB
- Allowed formats: PNG, JPG, JPEG, WEBP
- Upload endpoint: /upload/
- Storage: AWS S3

================================================================
NOTES
================================================================

1. All timestamps are in ISO 8601 format with timezone
2. Prices are returned as numbers (not strings)
3. Phone numbers should include country code
4. Email addresses must be valid format
5. All text fields are trimmed of whitespace
6. File uploads return S3 URLs for storage
7. Order numbers are auto-generated (ORD000001, ORD000002, etc.)
8. Customer IDs are auto-generated sequential numbers

================================================================
END OF USER SIDE APIs DOCUMENTATION
================================================================


ADMIN SIDE API DOCUMENTATION
=====================================

This document contains all APIs used on the admin/owner side of the restaurant website.

=====================================
ADMIN AUTHENTICATION
=====================================

1. Create Admin/Owner Account
-------------------------------------
Method: POST
Endpoint: /create-admin/
Description: Register a new admin/owner account with superuser privileges.

Request Body:
{
  "email": "admin@restaurant.com",
  "password": "securepassword123",
  "first_name": "John",
  "last_name": "Doe",
  "phone": "+1234567890",
  "address": "123 Main Street, City, State",
  "username": "johndoe"
}

Success Response:
{
  "message": "User registered successfully",
  "user_id": 1,
  "username": "John Doe",
  "email": "admin@restaurant.com"
}

-------------------------------------

2. Admin/Owner Login
-------------------------------------
Method: POST
Endpoint: /Owner-Login/
Description: Authenticate admin/owner with staff and superuser privileges.

Request Body:
{
  "username": "admin@restaurant.com",
  "password": "securepassword123"
}

Success Response:
{
  "message": "Login successful",
  "user_id": 1,
  "username": "johndoe",
  "email": "admin@restaurant.com",
  "first_name": "John",
  "last_name": "Doe",
  "is_staff": true,
  "is_superuser": true
}

=====================================
CATEGORY MANAGEMENT (ADMIN ONLY)
=====================================

3. Create New Category
-------------------------------------
Method: POST
Endpoint: /categories/create/
Description: Create a new category (Admin only).

Request Body:
{
  "name": "Mexican",
  "description": "Authentic Mexican cuisine"
}

Success Response:
{
  "success": true,
  "message": "Category created successfully",
  "category": {
    "id": 3,
    "name": "Mexican",
    "description": "Authentic Mexican cuisine",
    "created_at": "2024-01-15T10:30:00Z"
  }
}

-------------------------------------

4. Delete Category
-------------------------------------
Method: POST
Endpoint: /categories/delete/
Description: Delete a category by ID (Admin only).

Request Body:
{
  "category_id": 3
}

Success Response:
{
  "success": true,
  "message": "Category \"Mexican\" deleted successfully"
}

-------------------------------------

5. Get All Categories
-------------------------------------
Method: GET
Endpoint: /categories/
Description: Retrieve all categories.

Success Response:
{
  "categories": [
    {
      "id": 1,
      "name": "Italian",
      "description": "Italian cuisine restaurants"
    },
    {
      "id": 2,
      "name": "Chinese",
      "description": "Chinese food establishments"
    }
  ]
}

=====================================
MENU MANAGEMENT (ADMIN ONLY)
=====================================

6. Create Menu Item
-------------------------------------
Method: POST
Endpoint: /createmenuitem/
Description: Create a new menu item (Admin only). Supports single or multiple pricing types.

Request Body - Single Pricing Type:
{
  "name": "Cheeseburger",
  "description": "Beef burger with cheese",
  "category_id": 2,
  "pricing_type": "single",
  "price": 9.99,
  "image": "https://example.com/burger.jpg",
  "is_available": true,
  "is_vegetarian": false
}

Request Body - Multiple Pricing Type:
{
  "name": "Pizza",
  "description": "Customizable pizza",
  "category_id": 1,
  "pricing_type": "multiple",
  "price_variations": {
    "Small": 10.99,
    "Medium": 14.99,
    "Large": 18.99
  },
  "image": "/images/pizza.jpg",
  "is_available": true,
  "is_vegetarian": true
}

Success Response:
{
  "success": true,
  "message": "Menu item created successfully",
  "menu_item": {
    "id": 3,
    "name": "Cheeseburger",
    "description": "Beef burger with cheese",
    "price": 9.99,
    "pricing_type": "single",
    "price_variations": {},
    "is_available": true,
    "is_vegetarian": false,
    "category_id": 2,
    "category_name": "American",
    "image": "https://example.com/burger.jpg",
    "created_at": "2024-01-15T10:30:00Z"
  }
}

-------------------------------------

7. Update Menu Item
-------------------------------------
Method: POST
Endpoint: /updatemenuitem/
Description: Update an existing menu item by ID (Admin only).

Request Body:
{
  "item_id": 1,
  "name": "Updated Burger",
  "price": 11.99,
  "is_available": false,
  "category_id": 3
}

Success Response:
{
  "success": true,
  "message": "Menu item updated successfully",
  "item_id": 1,
  "updated_fields": ["name", "price", "is_available", "category_id"],
  "menu_item": {
    "id": 1,
    "name": "Updated Burger",
    "description": "Beef burger with cheese",
    "price": "11.99",
    "category": "Premium Burgers",
    "is_available": false,
    "is_vegetarian": false,
    "image": "/images/burger.jpg"
  }
}

-------------------------------------

8. Get All Menu Items with Filters
-------------------------------------
Method: GET
Endpoint: /GetAllMenu/
Description: Retrieve all menu items with optional filtering by category, availability, and vegetarian options.

Query Parameters:
- category_id: Filter by category ID.
- available_only: Filter by availability (true/false).
- vegetarian_only: Filter by vegetarian status (true/false).

Request Examples:
GET /GetAllMenu/
GET /GetAllMenu/?category_id=1
GET /GetAllMenu/?available_only=true&vegetarian_only=true
GET /GetAllMenu/?category_id=2&available_only=false

Success Response:
{
  "success": true,
  "total_items": 2,
  "menu_items": [
    {
      "id": 1,
      "name": "Margherita Pizza",
      "description": "Classic cheese pizza",
      "price": 12.99,
      "pricing_type": "single",
      "price_variations": {},
      "is_available": true,
      "is_vegetarian": true,
      "category_id": 1,
      "category_name": "Italian",
      "image": "/images/pizza.jpg",
      "created_at": "2024-01-15T10:30:00Z"
    }
  ]
}

=====================================
ADMIN DASHBOARD & ORDERS MANAGEMENT
=====================================

9. Admin Dashboard Statistics
-------------------------------------
Method: GET
Endpoint: /Dashboard/
Description: Retrieve comprehensive dashboard statistics including today's metrics, total counts, status breakdown, and recent orders.

Success Response:
{
  "success": true,
  "stats": {
    "today_orders": 15,
    "today_revenue": 450.75,
    "total_orders": 1250,
    "total_customers": 350,
    "total_menu_items": 45,
    "status_counts": {
      "pending": 5,
      "confirmed": 3,
      "preparing": 4,
      "out_for_delivery": 2,
      "delivered": 1200,
      "cancelled": 36
    }
  },
  "recent_orders": [
    {
      "order_id": 1250,
      "order_number": "ORD001250",
      "customer_name": "John Doe",
      "total_amount": 35.99,
      "status": "preparing",
      "order_date": "2024-01-15T14:30:00Z"
    }
  ]
}

-------------------------------------

10. Get Orders with Filtering (Admin View)
-------------------------------------
Method: GET
Endpoint: /AdminOrdersView/
Description: Retrieve all orders with advanced filtering, search, and status breakdown.

Query Parameters:
- status: Filter by status (pending, confirmed, preparing, out_for_delivery, delivered, cancelled).
- date_from: Filter orders from date (YYYY-MM-DD).
- date_to: Filter orders to date (YYYY-MM-DD).
- search: Search by order number, customer name, phone, or address.

Request Examples:
GET /AdminOrdersView/
GET /AdminOrdersView/?status=pending
GET /AdminOrdersView/?date_from=2024-01-01&date_to=2024-01-15
GET /AdminOrdersView/?search=ORD001250
GET /AdminOrdersView/?search=John
GET /AdminOrdersView/?status=preparing&date_from=2024-01-10

Success Response:
{
  "success": true,
  "total_orders": 1250,
  "status_counts": {
    "pending": 5,
    "confirmed": 3,
    "preparing": 4,
    "out_for_delivery": 2,
    "delivered": 1200,
    "cancelled": 36
  },
  "filtered_orders": 4,
  "valid_statuses": ["pending", "confirmed", "preparing", "out_for_delivery", "delivered", "cancelled"],
  "orders": [
    {
      "order_id": 1250,
      "order_number": "ORD001250",
      "customer_name": "John Doe",
      "customer_phone": "+1234567890",
      "total_amount": 35.99,
      "status": "preparing",
      "order_date": "2024-01-15T14:30:00Z",
      "delivery_address": "123 Main St, City, State",
      "phone": "+1234567890",
      "items_count": 3,
      "items": [
        {
          "id": 1,
          "name": "Margherita Pizza",
          "quantity": 1,
          "price": 12.99,
          "selected_variation": "Large",
          "special_instructions": "Extra cheese"
        }
      ]
    }
  ]
}

-------------------------------------

11. Update Order Status
-------------------------------------
Method: POST
Endpoint: /UpdateOrderStatus/
Description: Update the status of an order using order ID or order number.

Request Body (Using Order Number):
{
  "order_id": "ORD001250",
  "status": "preparing"
}

OR (Using Order ID):
{
  "order_id": 1250,
  "status": "out_for_delivery"
}

Valid Status Values:
- pending
- confirmed
- preparing
- out_for_delivery
- delivered
- cancelled

Success Response:
{
  "success": true,
  "message": "Order status updated from preparing to out_for_delivery",
  "order_id": 1250,
  "order_number": "ORD001250",
  "old_status": "preparing",
  "new_status": "out_for_delivery",
  "status": "out_for_delivery"
}

=====================================
SUMMARY
=====================================

Total Admin APIs: 11

Authentication: 2 APIs
- Create Admin Account
- Admin Login

Category Management: 3 APIs
- Create Category
- Delete Category
- Get All Categories

Menu Management: 3 APIs
- Create Menu Item
- Update Menu Item
- Get All Menu Items

Dashboard & Orders: 3 APIs
- Dashboard Statistics
- Admin Orders View
- Update Order Status

=====================================