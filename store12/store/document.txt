Authentication & User Management API
1. Sign Up

Method: POST
Endpoint: /api/signup/
Description: Register a new user account.

Request Body
{
  "email": "john.doe@example.com",
  "password": "mypassword123",
  "first_name": "John",
  "last_name": "Doe",
  "phone": "1234567890",
  "address": "123 Main Street",
  "username": "johndoe"
}

Success Response
{
  "message": "User registered successfully",
  "user_id": 1,
  "customer_id": 10,
  "username": "johndoe",
  "email": "john.doe@example.com"
}

2. Login

Method: POST
Endpoint: /api/login/
Description: Authenticate a user and return user details.

Request Body
{
  "username": "johndoe",
  "password": "mypassword123"
}

Success Response
{
  "message": "Login successful",
  "user_id": 1,
  "username": "johndoe",
  "email": "john.doe@example.com",
  "first_name": "John",
  "last_name": "Doe",
  "customer_id": 10,
  "customer_name": "John Doe",
  "phone": "1234567890",
  "address": "123 Main Street"
}

3. Logout

Method: POST
Endpoint: /api/logout/
Description: Log out a user.

Request Body
{
  "username": "johndoe"
}

Success Response
{
  "message": "Logout successful"
}

4. Forgot Password

Method: POST
Endpoint: /api/forgot-password/
Description: Request a password reset email.

Request Body
{
  "email": "john.doe@example.com"
}

Success Response
{
  "message": "Password reset email sent successfully"
}

If Email Service Not Configured
{
  "message": "Email service not configured. Use this token for testing.",
  "reset_token": "random-generated-token",
  "reset_link": "https://example.com/reset-password?token=random-generated-token"
}

5. Reset Password

Method: POST
Endpoint: /api/reset-password/
Description: Reset user password using a token.

Request Body
{
  "token": "random-generated-token",
  "new_password": "newSecurePass123"
}

Success Response
{
  "message": "Password reset successfully"
}

6. Change Password

Method: POST
Endpoint: /api/change-password/
Description: Change the user's password.

Request Body
{
  "user_id": 1,
  "current_password": "oldPassword123",
  "new_password": "newSecurePass123"
}

Success Response
{
  "message": "Password changed successfully"
}

Category Management API
1. Create New Category

Method: POST
Endpoint: /categories/create/
Description: Create a new category (Admin only).

Request Body
{
  "name": "Mexican",
  "description": "Authentic Mexican cuisine"
}

Success Response
{
  "success": true,
  "message": "Category created successfully",
  "category": {
    "id": 3,
    "name": "Mexican",
    "description": "Authentic Mexican cuisine",
    "created_at": "2024-01-15T10:30:00Z"
  }
}

2. Delete Category

Method: POST
Endpoint: /categories/delete/
Description: Delete a category by ID (Admin only).

Request Body
{
  "category_id": 3
}

Success Response
{
  "success": true,
  "message": "Category \"Mexican\" deleted successfully"
}

3. Get All Categories

Method: GET
Endpoint: /categories/
Description: Retrieve all categories.

Success Response
{
  "categories": [
    {
      "id": 1,
      "name": "Italian",
      "description": "Italian cuisine restaurants"
    },
    {
      "id": 2,
      "name": "Chinese",
      "description": "Chinese food establishments"
    }
  ]
}

Menu Management API
1. Get All Menu Items with Filters

Method: GET
Endpoint: /GetAllMenu/
Description: Retrieve all menu items with optional filtering by category, availability, and vegetarian options.

Query Parameters

category_id: Filter by category ID.
available_only: Filter by availability (true/false).
vegetarian_only: Filter by vegetarian status (true/false).

Request Examples

GET /GetAllMenu/
GET /GetAllMenu/?category_id=1
GET /GetAllMenu/?available_only=true&vegetarian_only=true
GET /GetAllMenu/?category_id=2&available_only=false

Success Response
{
  "success": true,
  "total_items": 2,
  "menu_items": [
    {
      "id": 1,
      "name": "Margherita Pizza",
      "description": "Classic cheese pizza",
      "price": 12.99,
      "pricing_type": "single",
      "price_variations": {},
      "is_available": true,
      "is_vegetarian": true,
      "category_id": 1,
      "category_name": "Italian",
      "image": "/images/pizza.jpg",
      "created_at": "2024-01-15T10:30:00Z"
    }
  ]
}

2. Create Menu Item

Method: POST
Endpoint: /createmenuitem/
Description: Create a new menu item (Admin only). Supports single or multiple pricing types.

Request Body
Single Pricing Type
{
  "name": "Cheeseburger",
  "description": "Beef burger with cheese",
  "category_id": 2,
  "pricing_type": "single",
  "price": 9.99,
  "image": "https://example.com/burger.jpg",
  "is_available": true,
  "is_vegetarian": false
}

Multiple Pricing Type
{
  "name": "Pizza",
  "description": "Customizable pizza",
  "category_id": 1,
  "pricing_type": "multiple",
  "price_variations": {
    "Small": 10.99,
    "Medium": 14.99,
    "Large": 18.99
  },
  "image": "/images/pizza.jpg",
  "is_available": true,
  "is_vegetarian": true
}

Success Response
{
  "success": true,
  "message": "Menu item created successfully",
  "menu_item": {
    "id": 3,
    "name": "Cheeseburger",
    "description": "Beef burger with cheese",
    "price": 9.99,
    "pricing_type": "single",
    "price_variations": {},
    "is_available": true,
    "is_vegetarian": false,
    "category_id": 2,
    "category_name": "American",
    "image": "https://example.com/burger.jpg",
    "created_at": "2024-01-15T10:30:00Z"
  }
}

3. Update Menu Item

Method: POST
Endpoint: /updatemenuitem/
Description: Update an existing menu item by ID (Admin only).

Request Body
{
  "item_id": 1,
  "name": "Updated Burger",
  "price": 11.99,
  "is_available": false,
  "category_id": 3
}

Success Response
{
  "success": true,
  "message": "Menu item updated successfully",
  "item_id": 1,
  "updated_fields": ["name", "price", "is_available", "category_id"],
  "menu_item": {
    "id": 1,
    "name": "Updated Burger",
    "description": "Beef burger with cheese",
    "price": "11.99",
    "category": "Premium Burgers",
    "is_available": false,
    "is_vegetarian": false,
    "image": "/images/burger.jpg"
  }
}

Admin/Owner Authentication API
1. Create Admin/Owner Account

Method: POST
Endpoint: /create-admin/
Description: Register a new admin/owner account with superuser privileges.

Request Body
{
  "email": "admin@restaurant.com",
  "password": "securepassword123",
  "first_name": "John",
  "last_name": "Doe",
  "phone": "+1234567890",
  "address": "123 Main Street, City, State",
  "username": "johndoe"
}

Success Response
{
  "message": "User registered successfully",
  "user_id": 1,
  "username": "John Doe",
  "email": "admin@restaurant.com"
}

2. Admin/Owner Login

Method: POST
Endpoint: /Owner-Login/
Description: Authenticate admin/owner with staff and superuser privileges.

Request Body
{
  "username": "admin@restaurant.com",
  "password": "securepassword123"
}

Success Response
{
  "message": "Login successful",
  "user_id": 1,
  "username": "johndoe",
  "email": "admin@restaurant.com",
  "first_name": "John",
  "last_name": "Doe",
  "is_staff": true,
  "is_superuser": true
}

Admin Dashboard & Orders Management API
1. Admin Dashboard Statistics

Method: GET
Endpoint: /Dashboard/
Description: Retrieve comprehensive dashboard statistics including today's metrics, total counts, status breakdown, and recent orders.

Success Response
{
  "success": true,
  "stats": {
    "today_orders": 15,
    "today_revenue": 450.75,
    "total_orders": 1250,
    "total_customers": 350,
    "total_menu_items": 45,
    "status_counts": {
      "pending": 5,
      "confirmed": 3,
      "preparing": 4,
      "out_for_delivery": 2,
      "delivered": 1200,
      "cancelled": 36
    }
  },
  "recent_orders": [
    {
      "order_id": 1250,
      "order_number": "ORD001250",
      "customer_name": "John Doe",
      "total_amount": 35.99,
      "status": "preparing",
      "order_date": "2024-01-15T14:30:00Z"
    }
  ]
}

2. Get Orders with Filtering

Method: GET
Endpoint: /AdminOrdersView/
Description: Retrieve all orders with advanced filtering, search, and status breakdown.

Query Parameters

status: Filter by status (pending, confirmed, preparing, out_for_delivery, delivered, cancelled).
date_from: Filter orders from date (YYYY-MM-DD).
date_to: Filter orders to date (YYYY-MM-DD).
search: Search by order number, customer name, phone, or address.

Request Examples

GET /AdminOrdersView/
GET /AdminOrdersView/?status=pending
GET /AdminOrdersView/?date_from=2024-01-01&date_to=2024-01-15
GET /AdminOrdersView/?search=ORD001250
GET /AdminOrdersView/?search=John
GET /AdminOrdersView/?status=preparing&date_from=2024-01-10

Success Response
{
  "success": true,
  "total_orders": 1250,
  "status_counts": {
    "pending": 5,
    "confirmed": 3,
    "preparing": 4,
    "out_for_delivery": 2,
    "delivered": 1200,
    "cancelled": 36
  },
  "filtered_orders": 4,
  "valid_statuses": ["pending", "confirmed", "preparing", "out_for_delivery", "delivered", "cancelled"],
  "orders": [
    {
      "order_id": 1250,
      "order_number": "ORD001250",
      "customer_name": "John Doe",
      "customer_phone": "+1234567890",
      "total_amount": 35.99,
      "status": "preparing",
      "order_date": "2024-01-15T14:30:00Z",
      "delivery_address": "123 Main St, City, State",
      "phone": "+1234567890",
      "items_count": 3,
      "items": [
        {
          "id": 1,
          "name": "Margherita Pizza",
          "quantity": 1,
          "price": 12.99,
          "selected_variation": "Large",
          "special_instructions": "Extra cheese"
        }
      ]
    }
  ]
}

3. Update Order Status

Method: POST
Endpoint: /UpdateOrderStatus/
Description: Update the status of an order using order ID or order number.

Request Body
{
  "order_id": "ORD001250",
  "status": "preparing"
}

OR
{
  "order_id": 1250,
  "status": "out_for_delivery"
}

Valid Status Values

pending, confirmed, preparing, out_for_delivery, delivered, cancelled

Success Response
{
  "success": true,
  "message": "Order status updated from preparing to out_for_delivery",
  "order_id": 1250,
  "order_number": "ORD001250",
  "old_status": "preparing",
  "new_status": "out_for_delivery",
  "status": "out_for_delivery"
}

Inquiry and Customer Management API
1. Create Inquiry (Contact Form)

Method: POST
Endpoint: /inquirycreate/
Description: Submit a new contact inquiry with optional email notification to admin.

Request Body
{
  "name": "John Doe",
  "phone": "+1 (555) 123-4567",
  "message": "I have a question about your catering services...",
  "email": "john@example.com"
}

Success Response
{
  "success": true,
  "message": "Thank you for your message! We will get back to you soon.",
  "inquiry_id": 15
}

2. Create Customer

Method: POST
Endpoint: /customer/create/
Description: Create a new customer record in the system.

Request Body
{
  "name": "Alice Johnson",
  "email": "alice@example.com",
  "phone": "+1-555-987-6543",
  "address": "456 Oak Street, City, State 12345"
}

Success Response
{
  "message": "Customer created successfully",
  "customer_id": 42
}

Order Management API
1. Create New Order

Method: POST
Endpoint: /order/create/
Description: Create a new order for a customer with specified items and delivery details.

Request Body
{
  "customer_id": 123,
  "delivery_address": "123 Main Street, City, State",
  "phone": "+1234567890",
  "items": [
    {
      "menu_item_id": 1,
      "quantity": 2,
      "selected_variation": "Large",
      "special_instructions": "Extra cheese"
    },
    {
      "menu_item_id": 2,
      "quantity": 1,
      "selected_variation": "Medium"
    }
  ]
}

Success Response
{
  "success": true,
  "message": "Order created successfully",
  "order_id": 123,
  "order_number": "ORD000123",
  "total_amount": 45.50,
  "order_summary": {
    "order_id": 123,
    "order_number": "ORD000123",
    "customer_name": "John Doe",
    "customer_phone": "+1234567890",
    "delivery_address": "123 Main Street, City, State",
    "total_amount": 45.50,
    "status": "pending",
    "order_date": "2024-01-15T10:30:00Z",
    "items": [
      {
        "id": 1,
        "name": "Pepperoni Pizza",
        "quantity": 2,
        "unit_price": 20.00,
        "total_price": 40.00,
        "selected_variation": "Large",
        "special_instructions": "Extra cheese"
      },
      {
        "id": 2,
        "name": "Chicken Wings",
        "quantity": 1,
        "unit_price": 5.50,
        "total_price": 5.50,
        "selected_variation": "Medium"
      }
    ]
  }
}

2. Get Customer Orders

Method: GET
Endpoint: /customer_orders/?customer_id=123
Description: Retrieve all orders for a specific customer.

Success Response
{
  "success": true,
  "customer_id": 123,
  "customer_name": "John Doe",
  "total_orders": 2,
  "orders": [
    {
      "order_id": 123,
      "order_number": "ORD000123",
      "total_amount": 45.50,
      "status": "completed",
      "order_date": "2024-01-15T10:30:00Z",
      "delivery_address": "123 Main Street, City, State",
      "items_count": 2,
      "items": [
        {
          "id": 1,
          "name": "Pepperoni Pizza",
          "quantity": 2,
          "price": 20.00,
          "selected_variation": "Large",
          "special_instructions": "Extra cheese"
        },
        {
          "id": 2,
          "name": "Chicken Wings",
          "quantity": 1,
          "price": 5.50,
          "selected_variation": "Medium"
        }
      ]
    }
  ]
}

3. Get Order Details

Method: GET
Endpoint: /order/123/
Description: Retrieve detailed information about a specific order.

Success Response
{
  "order": {
    "id": 123,
    "customer": "John Doe",
    "total_amount": 45.50,
    "status": "pending",
    "order_date": "2024-01-15T10:30:00Z",
    "delivery_address": "123 Main Street, City, State",
    "phone": "+1234567890",
    "items": [
      {
        "menu_item": "Pepperoni Pizza",
        "quantity": 2,
        "price": 20.00,
        "subtotal": 40.00
      },
      {
        "menu_item": "Chicken Wings",
        "quantity": 1,
        "price": 5.50,
        "subtotal": 5.50
      }
    ]
  }
}

4. Update Order Status

Method: POST
Endpoint: /UpdateOrderStatus/
Description: Update the status of a specific order.

Request Body
{
  "order_id": 123,
  "status": "preparing"
}

Success Response
{
  "success": true,
  "message": "Order status updated successfully",
  "order_id": 123,
  "previous_status": "pending",
  "new_status": "preparing",
  "updated_at": "2024-01-15T11:30:00Z"
}

Menu Search API
Menu Search

Method: GET
Endpoint: /menu/search/
Description: Search menu items by name (case-insensitive) with optional availability filtering.

Query Parameters

q (required): Search query term for matching item names.
available (optional): Filter by availability (true/false). Default: true.

Request Examples

GET /menu/search/?q=pizza
GET /menu/search/?q=burger&available=true
GET /menu/search/?q=

Success Responses
1. Search with Results (Multiple Pricing)
{
  "success": true,
  "results": [
    {
      "id": 1,
      "name": "Margherita Pizza",
      "description": "Classic cheese pizza with tomato sauce",
      "category_id": 5,
      "category": "Pizzas",
      "is_vegetarian": true,
      "image": "/media/pizza.jpg",
      "is_available": true,
      "pricing_type": "multiple",
      "pricing": {
        "type": "multiple",
        "variations": [
          {
            "variation": "Small",
            "price": 12.99,
            "display_price": "₹12.99"
          },
          {
            "variation": "Medium",
            "price": 16.99,
            "display_price": "₹16.99"
          },
          {
            "variation": "Large",
            "price": 21.99,
            "display_price": "₹21.99"
          }
        ],
        "starting_from": "₹12.99",
        "min_price": 12.99,
        "max_price": 21.99
      },
      "match_type": "name"
    }
  ],
  "total_results": 1,
  "query": "pizza",
  "filters": {
    "available_only": true
  }
}

2. Single Pricing Item
{
  "success": true,
  "results": [
    {
      "id": 2,
      "name": "Garlic Bread",
      "description": "Freshly baked garlic bread",
      "category_id": 3,
      "category": "Appetizers",
      "is_vegetarian": true,
      "image": "media/garlic-bread.jpg",
      "is_available": true,
      "pricing_type": "single",
      "pricing": {
        "type": "single",
        "price": 8.99,
        "display_price": "₹8.99"
      },
      "match_type": "name"
    }
  ],
  "total_results": 1,
  "query": "garlic",
  "filters": {
    "available_only": true
  }
}

3. Unavailable Item
{
  "success": true,
  "results": [
    {
      "id": 3,
      "name": "Chocolate Cake",
      "description": "Rich chocolate dessert",
      "category_id": 8,
      "category": "Desserts",
      "is_vegetarian": true,
      "image": "/media/chocolate-cake.jpg",
      "is_available": false,
      "availability_message": "Item is currently unavailable",
      "pricing_type": "single",
      "pricing": {
        "type": "single",
        "price": 6.99,
        "display_price": "₹6.99"
      },
      "match_type": "name"
    }
  ],
  "total_results": 1,
  "query": "cake",
  "filters": {
    "available_only": false
  }
}

4. No Results Found
{
  "success": true,
  "results": [],
  "total_results": 0,
  "query": "sushi",
  "filters": {
    "available_only": true
  }
}

5. Empty Search Query
{
  "success": true,
  "results": [],
  "total_results": 0,
  "query": "",
  "message": "Please enter a search term"
}




GET inquirylist/

to see all enquirys

self request api




POST inquiryupdate/    to update the status of the api

body 

{
    "id": 1,
    "status": "in_progress"
}

status accepted are 

in_progress
resolved



delete menu_item

POST deletemenuitem

{
    "item_id": 2
}



file upload 

POST  upload/

body 

formdata

"file" : file