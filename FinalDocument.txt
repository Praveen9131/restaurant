# API Documentation - Restaurant Management System

## Base URL
```
https://api.yourrestaurant.com
```

---

## üîê Authentication Endpoints

### 1. Customer Registration
**Endpoint:** `POST /signup/`

**Request Body:**
```json
{
  "email": "customer@example.com",
  "password": "password123",
  "first_name": "John",
  "last_name": "Doe",
  "phone": "9876543210",
  "address": "123 Main St"
}
```

**Response:** `201 Created`
```json
{
  "message": "User registered successfully",
  "user_id": 1,
  "customer_id": 1,
  "username": "John Doe",
  "email": "customer@example.com"
}
```

---

### 2. Customer Login
**Endpoint:** `POST /login/`

**Request Body:**
```json
{
  "username": "customer@example.com",
  "password": "password123"
}
```

**Response:** `200 OK`
```json
{
  "message": "Login successful",
  "user_id": 1,
  "username": "John Doe",
  "email": "customer@example.com",
  "customer_id": 1,
  "customer_name": "John Doe",
  "phone": "9876543210",
  "address": "123 Main St"
}
```

---

### 3. Admin Login
**Endpoint:** `POST /Owner-Login/`

**Request Body:**
```json
{
  "username": "admin@example.com",
  "password": "admin123"
}
```

---

### 4. Forgot Password
**Endpoint:** `POST /forgot-password/`

**Request Body:**
```json
{
  "email": "customer@example.com"
}
```

---

### 5. Reset Password
**Endpoint:** `POST /reset-password/`

**Request Body:**
```json
{
  "token": "reset_token_string",
  "new_password": "newpassword123"
}
```

---

### 6. Change Password
**Endpoint:** `POST /change-password/`

**Request Body:**
```json
{
  "user_id": 1,
  "current_password": "oldpassword",
  "new_password": "newpassword123"
}
```

---

## üìÅ Category Management

### 1. Get All Active Categories
**Endpoint:** `GET /categories/`

**Response:** `200 OK`
```json
{
  "categories": [
    {
      "id": 1,
      "name": "Appetizers",
      "description": "Starters and snacks"
    }
  ]
}
```

---

### 2. Create Category (Admin)
**Endpoint:** `POST /create-categories/`

**Request Body:**
```json
{
  "name": "Desserts",
  "description": "Sweet treats"
}
```

---

### 3. Delete Category (Admin)
**Endpoint:** `POST /delete-categories/`

**Request Body:**
```json
{
  "category_id": 1
}
```

---

## üçï Menu Management

### 1. Complete Menu with Categories
**Endpoint:** `GET /complete-menu/`

**Response:** `200 OK`
```json
{
  "success": true,
  "categories": [
    {
      "id": 1,
      "name": "Appetizers",
      "description": "Starters",
      "items_count": 5,
      "items": [
        {
          "id": 1,
          "name": "Garlic Bread",
          "description": "Toasted bread with garlic butter",
          "category_id": 1,
          "image": "https://s3.url/image.jpg",
          "is_vegetarian": true,
          "is_available": true,
          "pricing_type": "single",
          "pricing": {
            "type": "single",
            "price": 120,
            "display_price": "‚Çπ120"
          }
        }
      ]
    }
  ]
}
```

---

### 2. Menu Items by Category
**Endpoint:** `GET /category-menu/`

**Query Parameters:**
- `category_id` (optional): Filter by category

**Example:** `GET /category-menu/?category_id=1`

---

### 3. Single Menu Item Details
**Endpoint:** `GET /menu-item/`

**Query Parameters:**
- `item_id` (required): Menu item ID

**Example:** `GET /menu-item/?item_id=1`

---

### 4. Search Menu Items
**Endpoint:** `GET /menu/search/`

**Query Parameters:**
- `q` (required): Search query
- `available` (optional): true/false

**Example:** `GET /menu/search/?q=pizza&available=true`

---

### 5. Get All Menu Items (Admin)
**Endpoint:** `GET /AdminGetAllMenu/`

**Query Parameters:**
- `category_id` (optional): Filter by category
- `available_only` (optional): true/false
- `vegetarian_only` (optional): true/false

**Example:** `GET /AdminGetAllMenu/?category_id=1&available_only=true&vegetarian_only=false`

---

## üë®‚Äçüç≥ Admin Menu CRUD Operations

### 1. Create Menu Item
**Endpoint:** `POST /createmenuitem/`

**Single Pricing:**
```json
{
  "name": "Margherita Pizza",
  "description": "Classic pizza with tomato and mozzarella",
  "category_id": 2,
  "pricing_type": "single",
  "price": 299,
  "image": "https://s3.url/pizza.jpg",
  "is_available": true,
  "is_vegetarian": true
}
```

**Multiple Pricing:**
```json
{
  "name": "Pizza",
  "description": "Various sizes available",
  "category_id": 2,
  "pricing_type": "multiple",
  "price_variations": {
    "Small": 199,
    "Medium": 299,
    "Large": 399
  },
  "image": "https://s3.url/pizza.jpg",
  "is_available": true,
  "is_vegetarian": true
}
```

---

### 2. Update Menu Item
**Endpoint:** `POST /updatemenuitem/`

**Request Body:**
```json
{
  "item_id": 1,
  "name": "Updated Pizza Name",
  "price": 349,
  "is_available": false
}
```

---

### 3. Delete Menu Item
**Endpoint:** `POST /deletemenuitem/`

**Request Body:**
```json
{
  "item_id": 1
}
```

---

## üõí Order Management

### 1. Create New Order
**Endpoint:** `POST /order/create/`

**Request Body:**
```json
{
  "customer_id": 1,
  "delivery_address": "123 Delivery Address",
  "phone": "9876543210",
  "items": [
    {
      "menu_item_id": 1,
      "quantity": 2,
      "selected_variation": "Medium",
      "special_instructions": "Extra cheese"
    }
  ]
}
```

**Note:** `selected_variation` is required for items with multiple pricing.

**Response:** `200 OK`
```json
{
  "success": true,
  "message": "Order created successfully",
  "order_id": 1,
  "order_number": "ORD000001",
  "total_amount": 598,
  "order_summary": {
    "order_id": 1,
    "customer_name": "John Doe",
    "total_amount": 598,
    "status": "pending",
    "items": [
      {
        "id": 1,
        "name": "Margherita Pizza",
        "quantity": 2,
        "unit_price": 299,
        "total_price": 598,
        "selected_variation": "Medium"
      }
    ]
  }
}
```

---

### 2. Get Customer Orders
**Endpoint:** `GET /customer_orders/`

**Query Parameters:**
- `customer_id` (required): Customer ID

**Example:** `GET /customer_orders/?customer_id=1`

---

### 3. Get Order Details
**Endpoint:** `GET /order/{order_id}/`

**URL Parameters:**
- `order_id` (required): Order ID

**Example:** `GET /order/1/`

---

### 4. Update Order Status (Admin)
**Endpoint:** `POST /UpdateOrderStatus/`

**Request Body:**
```json
{
  "order_id": "ORD000001",
  "status": "confirmed"
}
```

**Status Options:**
- `pending`
- `confirmed`
- `preparing`
- `out_for_delivery`
- `delivered`
- `cancelled`

**Note:** `order_id` can be either order number (string) or numeric ID (integer).

---

## üìû Inquiry/Contact Endpoints

### 1. Create Inquiry
**Endpoint:** `POST /inquirycreate/`

**Request Body:**
```json
{
  "name": "John Doe",
  "phone": "9876543210",
  "email": "john@example.com",
  "message": "I have a question about..."
}
```

---

### 2. Get All Inquiries (Admin)
**Endpoint:** `GET /inquirylist/`

---

### 3. Update Inquiry Status (Admin)
**Endpoint:** `POST /inquiryupdate/`

**Request Body:**
```json
{
  "id": 1,
  "status": "resolved"
}
```

**Status Options:**
- `new` - New inquiry
- `in_progress` - Being handled
- `resolved` - Completed

---

## üìä Admin Dashboard

### 1. Dashboard Statistics
**Endpoint:** `GET /Dashboard/`

**Response:** `200 OK`
```json
{
  "success": true,
  "stats": {
    "today_orders": 15,
    "today_revenue": 4500,
    "total_orders": 250,
    "total_customers": 120,
    "total_menu_items": 45,
    "status_counts": {
      "pending": 5,
      "confirmed": 3,
      "preparing": 4,
      "out_for_delivery": 2,
      "delivered": 1,
      "cancelled": 0
    }
  },
  "recent_orders": [
    {
      "order_id": 250,
      "order_number": "ORD000250",
      "customer_name": "John Doe",
      "total_amount": 1200,
      "status": "delivered",
      "order_date": "2024-01-15T14:30:00Z"
    }
  ]
}
```

---

### 2. Admin Orders View
**Endpoint:** `GET /AdminOrdersView/`

**Query Parameters:**
- `status` (optional): Filter by status
- `date_from` (optional): Filter from date (YYYY-MM-DD)
- `date_to` (optional): Filter to date (YYYY-MM-DD)
- `search` (optional): Search by customer name, phone, or address

**Example:** `GET /AdminOrdersView/?status=pending&date_from=2024-01-01&date_to=2024-01-15&search=John`

---

## üìÅ File Upload

### 1. Upload Image to S3
**Endpoint:** `POST /upload/`

**Content-Type:** `multipart/form-data`

**Body:**
- `file`: Image file

**Response:** `201 Created`
```json
{
  "file_name": "pizza.jpg",
  "s3_url": "https://bucket.s3.region.amazonaws.com/dishes/pizza.jpg",
  "file_size": 204800,
  "folder": "dishes/"
}
```

---

## üéØ Common Response Formats

### Success Response
```json
{
  "success": true,
  "message": "Operation successful",
  "data": {}
}
```

### Error Response
```json
{
  "success": false,
  "error": "Error description"
}
```

### Validation Error
```json
{
  "success": false,
  "error": "Field validation failed",
  "details": {
    "field_name": "Error message"
  }
}
```

---

## üîÑ Order Status Flow

```
pending ‚Üí confirmed ‚Üí preparing ‚Üí out_for_delivery ‚Üí delivered
             ‚Üì
          cancelled
```

---

## üìù Notes

- All POST requests should include `Content-Type: application/json` header
- Authentication tokens should be included in headers where required
- Date formats follow ISO 8601 standard (YYYY-MM-DDTHH:mm:ssZ)
- All monetary values are in the smallest currency unit (e.g., paise for INR)
- Image uploads must be valid image files (JPEG, PNG, etc.)